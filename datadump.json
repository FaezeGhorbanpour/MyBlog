[{"model": "contenttypes.contenttype", "pk": 1, "fields": {"app_label": "admin", "model": "logentry"}}, {"model": "contenttypes.contenttype", "pk": 2, "fields": {"app_label": "auth", "model": "permission"}}, {"model": "contenttypes.contenttype", "pk": 3, "fields": {"app_label": "auth", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 4, "fields": {"app_label": "auth", "model": "group"}}, {"model": "contenttypes.contenttype", "pk": 5, "fields": {"app_label": "contenttypes", "model": "contenttype"}}, {"model": "contenttypes.contenttype", "pk": 6, "fields": {"app_label": "sessions", "model": "session"}}, {"model": "contenttypes.contenttype", "pk": 7, "fields": {"app_label": "MyBlog", "model": "post"}}, {"model": "contenttypes.contenttype", "pk": 8, "fields": {"app_label": "MyBlog", "model": "blog"}}, {"model": "contenttypes.contenttype", "pk": 9, "fields": {"app_label": "MyBlog", "model": "author"}}, {"model": "contenttypes.contenttype", "pk": 10, "fields": {"app_label": "MyBlog", "model": "entry"}}, {"model": "contenttypes.contenttype", "pk": 11, "fields": {"app_label": "MyBlog", "model": "user"}}, {"model": "contenttypes.contenttype", "pk": 12, "fields": {"app_label": "MyBlog", "model": "comment"}}, {"model": "contenttypes.contenttype", "pk": 13, "fields": {"app_label": "MyUser", "model": "myuser"}}, {"model": "contenttypes.contenttype", "pk": 14, "fields": {"app_label": "corsheaders", "model": "corsmodel"}}, {"model": "sessions.session", "pk": "d6qryomj5kf64z69emog9utpjex5xgkw", "fields": {"session_data": "NTczZDc1ODEzMDZjYTg4MWZmZjdmNGU3ZWZkZTg1NWVjYzJmZGRjYTp7Il9hdXRoX3VzZXJfaGFzaCI6IjAyNDk4MzQyNmIxNDQ4M2MxZDJlNThkNWM0ODkwMzczNDA1MTE4ZjEiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=", "expire_date": "2017-08-01T07:44:02.240Z"}}, {"model": "sessions.session", "pk": "jdcz1x2zpq607pv0dbqhaz620fazorvf", "fields": {"session_data": "ZWRiMzU4MjA5OGNmOWNkNzAwNGE3NzJiMDIxMDNkOTI1MDRiNWRmMTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6IjIiLCJfYXV0aF91c2VyX2hhc2giOiI3ZDM4OTNjMzkyZDQ1NDIwMjcxMTZkYTIyMzYxZGYxN2M1ZjI3MDE3In0=", "expire_date": "2017-08-03T13:57:42.946Z"}}, {"model": "MyBlog.post", "pk": 1, "fields": {"title": "first post", "date": "2017-07-06T19:54:08Z", "blog": 9, "text": "text of post", "summary": "Summary not written!", "image": "static/img/no-img.jpg"}}, {"model": "MyBlog.post", "pk": 2, "fields": {"title": "second title", "date": "2017-07-06T21:08:23.774Z", "blog": null, "text": "None", "summary": "Summary not written!", "image": "static/img/no-img.jpg"}}, {"model": "MyBlog.post", "pk": 3, "fields": {"title": "third title", "date": "2017-07-06T21:09:25Z", "blog": 13, "text": "Have you read the Django Signals Documentation and wondered, \u201cOkay, how the heck do you actually use it? How about an example?\u201d If so, then you\u2019ve come to the right place.\r\n\r\nWill demo by example adding signals for pre_save, pre_delete to raise an exception if a READ_ONLY_FILE exists to prevent the DB from changing. Then, add signals for post_save and post_delete to print the change to stdout. Using print as an example, a more useful thing would be to write it to syslog or something \u2013 say you want to log every DB change that occurs.", "summary": "Have you read the Django Signals Documentation and wondered, \u201cOkay, how the heck do you actually use it? How about an example?\u201d If so, then you\u2019ve come to the right place.", "image": "MyBlog/static/img/post/7.png"}}, {"model": "MyBlog.post", "pk": 4, "fields": {"title": "How to Create Django Signals", "date": "2017-07-14T16:25:43Z", "blog": 11, "text": "The Django Signals is a strategy to allow decoupled applications to get notified when certain events occur. Let\u2019s say you want to invalidate a cached page everytime a given model instance is updated, but there are several places in your code base that this model can be updated. You can do that using signals, hooking some pieces of code to be executed everytime this specific model\u2019s save method is trigged.\r\n\r\nAnother common use case is when you have extended the Custom Django User by using the Profile strategy through a one-to-one relationship. What we usually do is use a \u201csignal dispatcher\u201d to listen for the User\u2019s post_save event to also update the Profile instance as well. I\u2019ve covered this case in another post, which you can read here: How to Extend Django User Model.\r\n\r\nIn this tutorial I will present you the built-in signals and give you some general advices about the best practices.\r\n\r\nWhen Should I Use It?\r\n\r\nBefore we move forward, know when you should use it:\r\n\r\nWhen many pieces of code may be interested in the same events;\r\nWhen you need to interact with a decoupled application, e.g.:\r\nA Django core model;\r\nA model defined by a third-party app.\r\nHow it works?\r\n\r\nIf you are familiar with the Observer Design Pattern, this is somewhat how Django implements it. Or at least serves for the same purpose.\r\n\r\nThere are two key elements in the signals machinary: the senders and the receivers. As the name suggests, the sender is the one responsible to dispatch a signal, and the receiver is the one who will receive this signal and then do something.\r\n\r\nA receiver must be a function or an instance method which is to receive signals.\r\n\r\nA sender must either be a Python object, or None to receive events from any sender.\r\n\r\nThe connection between the senders and the receivers is done through \u201csignal dispatchers\u201d, which are instances of Signal, via the connect method.\r\n\r\nThe Django core also defines a ModelSignal, which is a subclass of Signal that allows the sender to be lazily specified as a string of the app_label.ModelName form. But, generally speaking, you will always want to use the Signal class to create custom signals.\r\n\r\nSo to receive a signal, you need to register a receiver function that gets called when the signal is sent by using the Signal.connect() method.", "summary": "The Django Signals is a strategy to allow decoupled applications to get notified when certain events occur. Let\u2019s say you want to invalidate a cached page everytime a given model instance is updated, but there are several places in your code base that this model can be updated. You can do that using signals, hooking some pieces of code to be executed everytime this specific model\u2019s save method is trigged.", "image": "MyBlog/static/img/post/signal.jpg"}}, {"model": "MyBlog.post", "pk": 5, "fields": {"title": "How to Extend Django User Model", "date": "2017-07-14T16:28:46Z", "blog": 11, "text": "The Django\u2019s built-in authentication system is great. For the most part we can use it out-of-the-box, saving a lot of development and testing effort. It fits most of the use cases and is very safe. But sometimes we need to do some fine adjustment so to fit our Web application.\r\n\r\nCommonly we want to store a few more data related to our User. If your Web application have an social appeal, you might want to store a short bio, the location of the user, and other things like that.\r\n\r\nIn this tutorial I will present the strategies you can use to simply extend the default Django User Model, so you don\u2019t need to implement everything from scratch.\r\n\r\nWays to Extend the Existing User Model\r\n\r\nGenerally speaking, there are four different ways to extend the existing User model. Read below why and when to use them.\r\n\r\nOption 1: Using a Proxy Model\r\n\r\nWhat is a Proxy Model?\r\nIt is a model inheritance without creating a new table in the database. It is used to change the behaviour of an existing model (e.g. default ordering, add new methods, etc.) without affecting the existing database schema.\r\n\r\nWhen should I use a Proxy Model?\r\nYou should use a Proxy Model to extend the existing User model when you don\u2019t need to store extra information in the database, but simply add extra methods or change the model\u2019s query Manager.\r\n\r\nThat\u2019s what I need! Take me to the instructions.\r\n\r\nOption 2: Using One-To-One Link With a User Model (Profile)\r\n\r\nWhat is a One-To-One Link?\r\nIt is a regular Django model that\u2019s gonna have it\u2019s own database table and will hold a One-To-One relationship with the existing User Model through a OneToOneField.\r\n\r\nWhen should I use a One-To-One Link?\r\nYou should use a One-To-One Link when you need to store extra information about the existing User Model that\u2019s not related to the authentication process. We usually call it a User Profile.\r\n\r\nThat\u2019s what I need! Take me to the instructions.\r\n\r\nOption 3: Creating a Custom User Model Extending AbstractBaseUser\r\n\r\nWhat is a Custom User Model Extending AbstractBaseUser?\r\nIt is an entirely new User model that inherit from AbstractBaseUser. It requires a special care and to update some references through the settings.py. Ideally it should be done in the begining of the project, since it will dramatically impact the database schema. Extra care while implementing it.\r\n\r\nWhen should I use a Custom User Model Extending AbstractBaseUser?\r\nYou should use a Custom User Model when your application have specific requirements in relation to the authentication process. For example, in some cases it makes more sense to use an email address as your identification token instead of a username.\r\n\r\nThat\u2019s what I need! Take me to the instructions.\r\n\r\nOption 4: Creating a Custom User Model Extending AbstractUser\r\n\r\nWhat is a Custom User Model Extending AbstractUser?\r\nIt is a new User model that inherit from AbstractUser. It requires a special care and to update some references through the settings.py. Ideally it should be done in the begining of the project, since it will dramatically impact the database schema. Extra care while implementing it.\r\n\r\nWhen should I use a Custom User Model Extending AbstractUser?\r\nYou should use it when you are perfectly happy with how Django handles the authentication process and you wouldn\u2019t change anything on it. Yet, you want to add some extra information directly in the User model, without having to create an extra class (like in the Option 2).\r\n\r\nThat\u2019s what I need! Take me to the instructions.", "summary": "The Django\u2019s built-in authentication system is great. For the most part we can use it out-of-the-box, saving a lot of development and testing effort. It fits most of the use cases and is very safe. But sometimes we need to do some fine adjustment so to fit our Web application.\r\n\r\nCommonly we want to store a few more data related to our User. If your Web application have an social appeal, you might want to store a short bio, the location of the user, and other things like that.\r\n\r\nIn this tutorial I will present the strategies you can use to simply extend the default Django User Model, so you don\u2019t need to implement everything from scratch.", "image": "MyBlog/static/img/post/extend.jpg"}}, {"model": "MyBlog.post", "pk": 18, "fields": {"title": "How to Filter QuerySets Dynamically", "date": "2017-07-14T19:02:02.199Z", "blog": 11, "text": "Installation\r\n\r\nEasiest way is to install it with pip:\r\n\r\npip install django-filter\r\nThat\u2019s it. It\u2019s ready to be used. Make sure you update your requirements.txt.\r\n\r\nThe default language of the app is English. It already come with some localization and language support. Currently the supported languages are: de, es_AR, fr, pl, ru, zh_CN. Unless you want to use any of those languages in your project, you don\u2019t need to add django_filter to the INSTALLED_APPS.\r\n\r\nUsage\r\n\r\nCreate a file named filters.py inside your app folder:\r\n\r\nfilters.py\r\n\r\nfrom django.contrib.auth.models import User\r\nimport django_filters\r\n\r\nclass UserFilter(django_filters.FilterSet):\r\n    class Meta:\r\n        model = User\r\n        fields = ['username', 'first_name', 'last_name', ]\r\nThe view is as simple as:\r\n\r\nviews.py\r\n\r\nfrom django.contrib.auth.models import User\r\nfrom django.shortcuts import render\r\nfrom .filters import UserFilter\r\n\r\ndef search(request):\r\n    user_list = User.objects.all()\r\n    user_filter = UserFilter(request.GET, queryset=user_list)\r\n    return render(request, 'search/user_list.html', {'filter': user_filter})\r\nThen a route:\r\n\r\nurls.py\r\n\r\nfrom django.conf.urls import url\r\nfrom mysite.search import views\r\n\r\nurlpatterns = [\r\n    url(r'^search/$', views.search, name='search'),\r\n]\r\nAnd finally the template:\r\n\r\nuser_list.html\r\n\r\n{% extends 'base.html' %}\r\n\r\n{% block content %}\r\n  <form method=\"get\">\r\n    {{ filter.form.as_p }}\r\n    <button type=\"submit\">Search</button>\r\n  </form>\r\n  <ul>\r\n  {% for user in filter.qs %}\r\n    <li>{{ user.username }} - {{ user.get_full_name }}</li>\r\n  {% endfor %}\r\n  </ul>\r\n{% endblock %}\r\nThe magic happens inside the UserFilter class. We simply have to pass the request.GET data to the UserFilter class, along with the QuerySet we want to filter. It will generate a Django Form with the search fields as well as return the filtered QuerySet.\r\n\r\nSo basically we will be working inside the UserFilter definition and the HTML template, displaying properly the data.", "summary": "Filtering QuerySets dynamically is a fairly common use case. Sure thing there is a pluggable app to make your life easier. This tutorial is about how to use the django-filter app to add a hassle-free filtering to your views. To illustrate this tutorial I will implement a view to search for users. As usual the code used in this tutorial is available on GitHub. You can find the link in the end of this post.", "image": "MyBlog/static/img/no-img.jpg"}}, {"model": "MyBlog.post", "pk": 19, "fields": {"title": "Django Tips #13 Using F() Expressions", "date": "2017-07-14T19:43:57.938Z", "blog": 11, "text": "A possible solution would be:\r\n\r\nproducts = Product.objects.all()\r\nfor product in products:\r\n    product.price *= 1.2\r\n    product.save()\r\nInstead you could use an F() expression to update it in a single query:\r\n\r\nfrom django.db.models import F\r\n\r\nProduct.objects.update(price=F('price') * 1.2)\r\nYou can also do it for a single object:\r\n\r\nproduct = Product.objects.get(pk=5009)\r\nproduct.price = F('price') * 1.2\r\nproduct.save()\r\nBut take care with this kind of assignment. The F() object persist after saving the model.\r\n\r\nproduct.price                   # price = Decimal('10.00')\r\nproduct.price = F('price') + 1\r\nproduct.save()                  # price = Decimal('11.00')\r\nproduct.name = 'What the F()'\r\nproduct.save()                  # price = Decimal('12.00')\r\nSo, basically after updating a field like that, product.price will hold an instance of django.db.models.expressions.CombinedExpression, instead of the actual result. If you want to access the result immediately:\r\n\r\nproduct.price = F('price') + 1\r\nproduct.save()\r\nprint(product.price)            # <CombinedExpression: F(price) + Value(1)>\r\nproduct.refresh_from_db()\r\nprint(product.price)            # Decimal('13.00')\r\nYou can also use it to annotate data:\r\n\r\nfrom django.db.models import ExpressionWrapper, DecimalField\r\n\r\nProduct.objects.all().annotate(\r\n    value_in_stock=ExpressionWrapper(\r\n        F('price') * F('stock'), output_field=DecimalField()\r\n    )\r\n)\r\nSince price is a DecimalField and stock is a IntegerField, we need to wrap the expression inside a ExpressionWrapper object.\r\n\r\nIt can be used to filter data as well:\r\n\r\nProduct.objects.filter(stock__gte=F('ordered'))A possible solution would be:\r\n\r\nproducts = Product.objects.all()\r\nfor product in products:\r\n    product.price *= 1.2\r\n    product.save()\r\nInstead you could use an F() expression to update it in a single query:\r\n\r\nfrom django.db.models import F\r\n\r\nProduct.objects.update(price=F('price') * 1.2)\r\nYou can also do it for a single object:\r\n\r\nproduct = Product.objects.get(pk=5009)\r\nproduct.price = F('price') * 1.2\r\nproduct.save()\r\nBut take care with this kind of assignment. The F() object persist after saving the model.\r\n\r\nproduct.price                   # price = Decimal('10.00')\r\nproduct.price = F('price') + 1\r\nproduct.save()                  # price = Decimal('11.00')\r\nproduct.name = 'What the F()'\r\nproduct.save()                  # price = Decimal('12.00')\r\nSo, basically after updating a field like that, product.price will hold an instance of django.db.models.expressions.CombinedExpression, instead of the actual result. If you want to access the result immediately:\r\n\r\nproduct.price = F('price') + 1\r\nproduct.save()\r\nprint(product.price)            # <CombinedExpression: F(price) + Value(1)>\r\nproduct.refresh_from_db()\r\nprint(product.price)            # Decimal('13.00')\r\nYou can also use it to annotate data:\r\n\r\nfrom django.db.models import ExpressionWrapper, DecimalField\r\n\r\nProduct.objects.all().annotate(\r\n    value_in_stock=ExpressionWrapper(\r\n        F('price') * F('stock'), output_field=DecimalField()\r\n    )\r\n)\r\nSince price is a DecimalField and stock is a IntegerField, we need to wrap the expression inside a ExpressionWrapper object.\r\n\r\nIt can be used to filter data as well:\r\n\r\nProduct.objects.filter(stock__gte=F('ordered'))", "summary": "In the Django QuerySet API, F() expressions are used to refer to model field values directly in the database. Let\u2019s say you have a Product class with a price field, and you want to increase the price of all products in 20%.", "image": "MyBlog/static/img/no-img.jpg"}}, {"model": "MyBlog.post", "pk": 20, "fields": {"title": "New Post", "date": "2017-07-15T09:56:55.658Z", "blog": 11, "text": "Text of New Post - Text of New Post - Text of New Post - Text of New Post - Text of New Post - Text of New Post - Text of New Post - Text of New Post - Text of New Post - Text of New Post - Text of New Post - Text of New Post - Text of New Post -", "summary": "Summary of New Post", "image": "MyBlog/static/img/no-img.jpg"}}, {"model": "MyBlog.post", "pk": 21, "fields": {"title": "new post", "date": "2017-07-15T11:20:47.349Z", "blog": 11, "text": "new post", "summary": "new post", "image": "MyBlog/static/img/no-img.jpg"}}, {"model": "MyBlog.comment", "pk": 1, "fields": {"text": "Comment 1", "auther": 4, "post": 1, "date": "2017-07-13T19:21:06Z"}}, {"model": "MyBlog.comment", "pk": 2, "fields": {"text": "Comment 2", "auther": 4, "post": 3, "date": "2017-07-13T19:21:33Z"}}, {"model": "MyBlog.comment", "pk": 3, "fields": {"text": "Very Good!", "auther": 7, "post": 4, "date": "2017-07-14T20:59:03Z"}}, {"model": "MyBlog.comment", "pk": 4, "fields": {"text": "Excellent!", "auther": 6, "post": 4, "date": "2017-07-14T20:59:30Z"}}, {"model": "MyBlog.comment", "pk": 5, "fields": {"text": "nice", "auther": 5, "post": 4, "date": "2017-07-14T20:59:50Z"}}, {"model": "MyBlog.comment", "pk": 10, "fields": {"text": "Hello", "auther": 4, "post": 4, "date": "2017-07-14T21:49:12.513Z"}}, {"model": "MyBlog.comment", "pk": 11, "fields": {"text": "Hello", "auther": 4, "post": 4, "date": "2017-07-14T21:49:51.894Z"}}, {"model": "MyBlog.comment", "pk": 12, "fields": {"text": "Comment of New Post", "auther": 4, "post": 20, "date": "2017-07-15T09:57:15.541Z"}}, {"model": "MyBlog.comment", "pk": 13, "fields": {"text": "Comment of New Post", "auther": 4, "post": 20, "date": "2017-07-15T09:57:22.324Z"}}, {"model": "MyBlog.comment", "pk": 14, "fields": {"text": "new comment", "auther": 4, "post": 20, "date": "2017-07-15T11:22:44.908Z"}}, {"model": "MyBlog.comment", "pk": 15, "fields": {"text": "new comment", "auther": 4, "post": 20, "date": "2017-07-15T11:23:14.154Z"}}, {"model": "MyBlog.blog", "pk": 8, "fields": {"number": -1, "auther": 7, "image": "static/img/jamkaran.jpg"}}, {"model": "MyBlog.blog", "pk": 9, "fields": {"number": -1, "auther": 7, "image": "static/img/image1.jpg"}}, {"model": "MyBlog.blog", "pk": 10, "fields": {"number": -1, "auther": 9, "image": "static/img/no-img.jpg"}}, {"model": "MyBlog.blog", "pk": 11, "fields": {"number": 1, "auther": 4, "image": "static/img/Blog/3dlat.com_14063873207.jpg"}}, {"model": "MyBlog.blog", "pk": 12, "fields": {"number": 2, "auther": 4, "image": "static/img/no-img.jpg"}}, {"model": "MyBlog.blog", "pk": 13, "fields": {"number": 1, "auther": 5, "image": "static/img/Blog/20-135.jpg"}}, {"model": "MyBlog.blog", "pk": 14, "fields": {"number": 1, "auther": 10, "image": "static/img/no-img.jpg"}}, {"model": "MyBlog.blog", "pk": 15, "fields": {"number": 1, "auther": 11, "image": "static/img/no-img.jpg"}}, {"model": "MyBlog.blog", "pk": 16, "fields": {"number": 1, "auther": 12, "image": "static/img/no-img.jpg"}}, {"model": "auth.permission", "pk": 1, "fields": {"name": "Can add log entry", "content_type": 1, "codename": "add_logentry"}}, {"model": "auth.permission", "pk": 2, "fields": {"name": "Can change log entry", "content_type": 1, "codename": "change_logentry"}}, {"model": "auth.permission", "pk": 3, "fields": {"name": "Can delete log entry", "content_type": 1, "codename": "delete_logentry"}}, {"model": "auth.permission", "pk": 4, "fields": {"name": "Can add permission", "content_type": 2, "codename": "add_permission"}}, {"model": "auth.permission", "pk": 5, "fields": {"name": "Can change permission", "content_type": 2, "codename": "change_permission"}}, {"model": "auth.permission", "pk": 6, "fields": {"name": "Can delete permission", "content_type": 2, "codename": "delete_permission"}}, {"model": "auth.permission", "pk": 7, "fields": {"name": "Can add user", "content_type": 3, "codename": "add_user"}}, {"model": "auth.permission", "pk": 8, "fields": {"name": "Can change user", "content_type": 3, "codename": "change_user"}}, {"model": "auth.permission", "pk": 9, "fields": {"name": "Can delete user", "content_type": 3, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 10, "fields": {"name": "Can add group", "content_type": 4, "codename": "add_group"}}, {"model": "auth.permission", "pk": 11, "fields": {"name": "Can change group", "content_type": 4, "codename": "change_group"}}, {"model": "auth.permission", "pk": 12, "fields": {"name": "Can delete group", "content_type": 4, "codename": "delete_group"}}, {"model": "auth.permission", "pk": 13, "fields": {"name": "Can add content type", "content_type": 5, "codename": "add_contenttype"}}, {"model": "auth.permission", "pk": 14, "fields": {"name": "Can change content type", "content_type": 5, "codename": "change_contenttype"}}, {"model": "auth.permission", "pk": 15, "fields": {"name": "Can delete content type", "content_type": 5, "codename": "delete_contenttype"}}, {"model": "auth.permission", "pk": 16, "fields": {"name": "Can add session", "content_type": 6, "codename": "add_session"}}, {"model": "auth.permission", "pk": 17, "fields": {"name": "Can change session", "content_type": 6, "codename": "change_session"}}, {"model": "auth.permission", "pk": 18, "fields": {"name": "Can delete session", "content_type": 6, "codename": "delete_session"}}, {"model": "auth.permission", "pk": 19, "fields": {"name": "Can add post", "content_type": 7, "codename": "add_post"}}, {"model": "auth.permission", "pk": 20, "fields": {"name": "Can change post", "content_type": 7, "codename": "change_post"}}, {"model": "auth.permission", "pk": 21, "fields": {"name": "Can delete post", "content_type": 7, "codename": "delete_post"}}, {"model": "auth.permission", "pk": 22, "fields": {"name": "Can add blog", "content_type": 8, "codename": "add_blog"}}, {"model": "auth.permission", "pk": 23, "fields": {"name": "Can change blog", "content_type": 8, "codename": "change_blog"}}, {"model": "auth.permission", "pk": 24, "fields": {"name": "Can delete blog", "content_type": 8, "codename": "delete_blog"}}, {"model": "auth.permission", "pk": 25, "fields": {"name": "Can add author", "content_type": 9, "codename": "add_author"}}, {"model": "auth.permission", "pk": 26, "fields": {"name": "Can change author", "content_type": 9, "codename": "change_author"}}, {"model": "auth.permission", "pk": 27, "fields": {"name": "Can delete author", "content_type": 9, "codename": "delete_author"}}, {"model": "auth.permission", "pk": 28, "fields": {"name": "Can add entry", "content_type": 10, "codename": "add_entry"}}, {"model": "auth.permission", "pk": 29, "fields": {"name": "Can change entry", "content_type": 10, "codename": "change_entry"}}, {"model": "auth.permission", "pk": 30, "fields": {"name": "Can delete entry", "content_type": 10, "codename": "delete_entry"}}, {"model": "auth.permission", "pk": 31, "fields": {"name": "Can add user", "content_type": 11, "codename": "add_user"}}, {"model": "auth.permission", "pk": 32, "fields": {"name": "Can change user", "content_type": 11, "codename": "change_user"}}, {"model": "auth.permission", "pk": 33, "fields": {"name": "Can delete user", "content_type": 11, "codename": "delete_user"}}, {"model": "auth.permission", "pk": 34, "fields": {"name": "Can add comment", "content_type": 12, "codename": "add_comment"}}, {"model": "auth.permission", "pk": 35, "fields": {"name": "Can change comment", "content_type": 12, "codename": "change_comment"}}, {"model": "auth.permission", "pk": 36, "fields": {"name": "Can delete comment", "content_type": 12, "codename": "delete_comment"}}, {"model": "auth.permission", "pk": 37, "fields": {"name": "Can add my user", "content_type": 13, "codename": "add_myuser"}}, {"model": "auth.permission", "pk": 38, "fields": {"name": "Can change my user", "content_type": 13, "codename": "change_myuser"}}, {"model": "auth.permission", "pk": 39, "fields": {"name": "Can delete my user", "content_type": 13, "codename": "delete_myuser"}}, {"model": "auth.permission", "pk": 40, "fields": {"name": "Can add cors model", "content_type": 14, "codename": "add_corsmodel"}}, {"model": "auth.permission", "pk": 41, "fields": {"name": "Can change cors model", "content_type": 14, "codename": "change_corsmodel"}}, {"model": "auth.permission", "pk": 42, "fields": {"name": "Can delete cors model", "content_type": 14, "codename": "delete_corsmodel"}}, {"model": "auth.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$36000$8a05fH7KTTDX$ZApQY43XdgXMHWKEkOHbO0xtiO4GuAf/ROjGjXPdP9k=", "last_login": "2017-07-20T13:14:36.171Z", "is_superuser": true, "username": "FG", "first_name": "", "last_name": "", "email": "fg75527@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2017-06-30T20:13:22.265Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 2, "fields": {"password": "pbkdf2_sha256$36000$MeC3mvw1Tzsx$5iNBrK8Z24+6XnC20Okx5u6yoUxg8vu/9BFJKawEpYE=", "last_login": "2017-07-20T13:57:42.915Z", "is_superuser": false, "username": "User1", "first_name": "User1_f", "last_name": "User1_g", "email": "User1@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2017-07-13T11:17:21Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 3, "fields": {"password": "pbkdf2_sha256$36000$43bwz4e7LL6S$USsaQDDcPUWF+6i5vjm5GtM+HK9muB/s8mhPqYnZuoI=", "last_login": "2017-07-14T20:10:43.490Z", "is_superuser": false, "username": "User2", "first_name": "User2_f", "last_name": "User2_g", "email": "User2@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2017-07-13T11:18:38Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 4, "fields": {"password": "pbkdf2_sha256$36000$TvoUcmWyz3MR$eTDz6WWXKBCI9capzfBQg7NI91FOnR47Rt7Woo/qqkk=", "last_login": null, "is_superuser": false, "username": "User3", "first_name": "User3_f", "last_name": "User3_g", "email": "User3@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2017-07-13T11:20:20Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 5, "fields": {"password": "pbkdf2_sha256$36000$YCgNHJppRilv$vvAw76XwCpbJBu0VwEDJ7bAjH9ntKKXYjdpGZQud4rY=", "last_login": null, "is_superuser": false, "username": "User4", "first_name": "User4_f", "last_name": "User4_g", "email": "User4@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2017-07-13T11:34:55Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 6, "fields": {"password": "pbkdf2_sha256$36000$m7j1b03lHqA5$fV52FhCD27cbfu5TvmUmHTSuo82TAoGPlRJynB5UkQU=", "last_login": "2017-07-14T10:29:22.157Z", "is_superuser": false, "username": "User5", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-07-14T10:29:21.613Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 7, "fields": {"password": "pbkdf2_sha256$36000$8cqkxcUNbglj$xUQ0/HveSvk+YcQGtiFVEFqLlAbizzCueSmudpu+w2w=", "last_login": "2017-07-14T11:25:26.526Z", "is_superuser": false, "username": "User6", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-07-14T11:25:25.829Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 8, "fields": {"password": "pbkdf2_sha256$36000$4RaCqM5bRSyK$KfJepaXmoG4bXOtog9GxgPtmeB/+os8wsoTAlCG2O8w=", "last_login": "2017-07-18T07:31:43.174Z", "is_superuser": false, "username": "User7", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-07-18T07:31:42.740Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 9, "fields": {"password": "pbkdf2_sha256$36000$Lz57f5mi8D5x$sJapGj0e5+2D5gSdsIrHY03j0dSJ2mOnnKtp0DUUWLQ=", "last_login": "2017-07-18T07:43:46.139Z", "is_superuser": false, "username": "User8", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2017-07-18T07:43:45.635Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 10, "fields": {"password": "pbkdf2_sha256$36000$kWMLPkDMaEI5$pfRxR0LlL9kPsajk5iAInqtflA0r8kqi7mY20UCRGtw=", "last_login": "2017-07-20T13:57:33.080Z", "is_superuser": false, "username": "User", "first_name": "User_f", "last_name": "User_g", "email": "User@gmail.com", "is_staff": false, "is_active": true, "date_joined": "2017-07-20T13:07:57.369Z", "groups": [], "user_permissions": []}}, {"model": "MyUser.myuser", "pk": 4, "fields": {"user": 2, "img": "static/img/profile_6ETYF2P.jpg", "bio": "I am User1."}}, {"model": "MyUser.myuser", "pk": 5, "fields": {"user": 3, "img": "static/img/YKAOUYc.jpg", "bio": "I am User2."}}, {"model": "MyUser.myuser", "pk": 6, "fields": {"user": 4, "img": "static/img/photo_2017-04-14_11-51-22_NrCn2G8.jpg", "bio": "I am User3."}}, {"model": "MyUser.myuser", "pk": 7, "fields": {"user": 5, "img": "static/img/background.jpg", "bio": "please !!"}}, {"model": "MyUser.myuser", "pk": 8, "fields": {"user": 6, "img": "static/img/no-img.jpg", "bio": ""}}, {"model": "MyUser.myuser", "pk": 9, "fields": {"user": 7, "img": "static/img/no-img.jpg", "bio": ""}}, {"model": "MyUser.myuser", "pk": 10, "fields": {"user": 8, "img": "static/img/no-img.jpg", "bio": ""}}, {"model": "MyUser.myuser", "pk": 11, "fields": {"user": 9, "img": "static/img/no-img.jpg", "bio": ""}}, {"model": "MyUser.myuser", "pk": 12, "fields": {"user": 10, "img": "static/img/no-img.jpg", "bio": ""}}, {"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2017-06-30T20:21:01.484Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "title1", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2017-06-30T20:21:32.205Z", "user": 1, "content_type": 7, "object_id": "2", "object_repr": "title2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2017-06-30T20:22:05.993Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "title3", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2017-07-13T11:17:21.802Z", "user": 1, "content_type": 3, "object_id": "2", "object_repr": "User1", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 5, "fields": {"action_time": "2017-07-13T11:18:00.025Z", "user": 1, "content_type": 13, "object_id": "1", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 6, "fields": {"action_time": "2017-07-13T11:18:38.186Z", "user": 1, "content_type": 3, "object_id": "3", "object_repr": "User2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 7, "fields": {"action_time": "2017-07-13T11:19:47.641Z", "user": 1, "content_type": 13, "object_id": "2", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 8, "fields": {"action_time": "2017-07-13T11:20:20.245Z", "user": 1, "content_type": 3, "object_id": "4", "object_repr": "User3", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 9, "fields": {"action_time": "2017-07-13T11:21:40.141Z", "user": 1, "content_type": 13, "object_id": "3", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 10, "fields": {"action_time": "2017-07-13T11:22:47.405Z", "user": 1, "content_type": 8, "object_id": "1", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 11, "fields": {"action_time": "2017-07-13T11:22:58.690Z", "user": 1, "content_type": 8, "object_id": "2", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 12, "fields": {"action_time": "2017-07-13T11:23:07.976Z", "user": 1, "content_type": 8, "object_id": "3", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 13, "fields": {"action_time": "2017-07-13T11:23:12.514Z", "user": 1, "content_type": 8, "object_id": "4", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 14, "fields": {"action_time": "2017-07-13T11:23:17.987Z", "user": 1, "content_type": 8, "object_id": "5", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 15, "fields": {"action_time": "2017-07-13T11:23:21.874Z", "user": 1, "content_type": 8, "object_id": "6", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 16, "fields": {"action_time": "2017-07-13T11:23:31.586Z", "user": 1, "content_type": 8, "object_id": "7", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 17, "fields": {"action_time": "2017-07-13T11:27:11.376Z", "user": 1, "content_type": 13, "object_id": "3", "object_repr": " ", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 18, "fields": {"action_time": "2017-07-13T11:27:11.410Z", "user": 1, "content_type": 13, "object_id": "2", "object_repr": " ", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 19, "fields": {"action_time": "2017-07-13T11:27:11.446Z", "user": 1, "content_type": 13, "object_id": "1", "object_repr": " ", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 20, "fields": {"action_time": "2017-07-13T11:27:58.968Z", "user": 1, "content_type": 13, "object_id": "4", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 21, "fields": {"action_time": "2017-07-13T11:28:21.777Z", "user": 1, "content_type": 13, "object_id": "5", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 22, "fields": {"action_time": "2017-07-13T11:28:48.223Z", "user": 1, "content_type": 13, "object_id": "6", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 23, "fields": {"action_time": "2017-07-13T11:34:55.731Z", "user": 1, "content_type": 3, "object_id": "5", "object_repr": "User4", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 24, "fields": {"action_time": "2017-07-13T11:35:08.000Z", "user": 1, "content_type": 13, "object_id": "7", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 25, "fields": {"action_time": "2017-07-13T19:19:19.277Z", "user": 1, "content_type": 8, "object_id": "8", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 26, "fields": {"action_time": "2017-07-13T19:20:02.278Z", "user": 1, "content_type": 8, "object_id": "9", "object_repr": " ", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 27, "fields": {"action_time": "2017-07-13T19:20:31.124Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "third title", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"blog\"]}}]"}}, {"model": "admin.logentry", "pk": 28, "fields": {"action_time": "2017-07-13T19:20:44.460Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "first post", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"blog\"]}}]"}}, {"model": "admin.logentry", "pk": 29, "fields": {"action_time": "2017-07-13T19:20:57.640Z", "user": 1, "content_type": 7, "object_id": "1", "object_repr": "first post", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 30, "fields": {"action_time": "2017-07-13T19:21:33.570Z", "user": 1, "content_type": 12, "object_id": "1", "object_repr": "Comment 1", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 31, "fields": {"action_time": "2017-07-13T19:22:00.421Z", "user": 1, "content_type": 12, "object_id": "2", "object_repr": "Comment 2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 32, "fields": {"action_time": "2017-07-13T20:06:46.294Z", "user": 1, "content_type": 13, "object_id": "4", "object_repr": " ", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 33, "fields": {"action_time": "2017-07-13T20:11:58.844Z", "user": 1, "content_type": 3, "object_id": "2", "object_repr": "User1", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"first_name\", \"last_name\", \"email\"]}}]"}}, {"model": "admin.logentry", "pk": 34, "fields": {"action_time": "2017-07-13T20:30:21.622Z", "user": 1, "content_type": 3, "object_id": "3", "object_repr": "User2", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"first_name\", \"last_name\", \"email\"]}}]"}}, {"model": "admin.logentry", "pk": 35, "fields": {"action_time": "2017-07-13T20:31:38.412Z", "user": 1, "content_type": 3, "object_id": "4", "object_repr": "User3", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"first_name\", \"last_name\", \"email\"]}}]"}}, {"model": "admin.logentry", "pk": 36, "fields": {"action_time": "2017-07-13T20:32:18.910Z", "user": 1, "content_type": 3, "object_id": "5", "object_repr": "User4", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"first_name\", \"last_name\", \"email\"]}}]"}}, {"model": "admin.logentry", "pk": 37, "fields": {"action_time": "2017-07-14T11:10:17.892Z", "user": 1, "content_type": 13, "object_id": "8", "object_repr": " - ", "action_flag": 2, "change_message": "[]"}}, {"model": "admin.logentry", "pk": 38, "fields": {"action_time": "2017-07-14T16:17:35.683Z", "user": 1, "content_type": 8, "object_id": "11", "object_repr": "1", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 39, "fields": {"action_time": "2017-07-14T16:17:51.389Z", "user": 1, "content_type": 8, "object_id": "12", "object_repr": "2", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 40, "fields": {"action_time": "2017-07-14T16:19:18.636Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "third title", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"blog\"]}}]"}}, {"model": "admin.logentry", "pk": 41, "fields": {"action_time": "2017-07-14T16:20:15.810Z", "user": 1, "content_type": 8, "object_id": "13", "object_repr": "1", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 42, "fields": {"action_time": "2017-07-14T16:25:43.313Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "third title", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"blog\", \"text\", \"summery\", \"image\"]}}]"}}, {"model": "admin.logentry", "pk": 43, "fields": {"action_time": "2017-07-14T16:28:46.283Z", "user": 1, "content_type": 7, "object_id": "4", "object_repr": "How to Create Django Signals", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 44, "fields": {"action_time": "2017-07-14T16:30:12.609Z", "user": 1, "content_type": 7, "object_id": "5", "object_repr": "How to Extend Django User Model", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 45, "fields": {"action_time": "2017-07-14T17:21:57.180Z", "user": 1, "content_type": 7, "object_id": "5", "object_repr": "How to Extend Django User Model", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 46, "fields": {"action_time": "2017-07-14T17:22:11.506Z", "user": 1, "content_type": 7, "object_id": "4", "object_repr": "How to Create Django Signals", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 47, "fields": {"action_time": "2017-07-14T17:24:23.443Z", "user": 1, "content_type": 7, "object_id": "5", "object_repr": "How to Extend Django User Model", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 48, "fields": {"action_time": "2017-07-14T17:24:36.893Z", "user": 1, "content_type": 7, "object_id": "4", "object_repr": "How to Create Django Signals", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 49, "fields": {"action_time": "2017-07-14T17:35:14.379Z", "user": 1, "content_type": 7, "object_id": "3", "object_repr": "third title", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"image\"]}}]"}}, {"model": "admin.logentry", "pk": 50, "fields": {"action_time": "2017-07-14T19:00:16.083Z", "user": 1, "content_type": 7, "object_id": "17", "object_repr": "How to Filter QuerySets Dynamically", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 51, "fields": {"action_time": "2017-07-14T19:00:16.113Z", "user": 1, "content_type": 7, "object_id": "16", "object_repr": "How to Filter QuerySets Dynamically", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 52, "fields": {"action_time": "2017-07-14T19:00:16.143Z", "user": 1, "content_type": 7, "object_id": "15", "object_repr": "How to Filter QuerySets Dynamically", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 53, "fields": {"action_time": "2017-07-14T19:00:16.173Z", "user": 1, "content_type": 7, "object_id": "14", "object_repr": "How to Filter QuerySets Dynamically", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 54, "fields": {"action_time": "2017-07-14T19:00:16.203Z", "user": 1, "content_type": 7, "object_id": "13", "object_repr": "How to Filter QuerySets Dynamically", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 55, "fields": {"action_time": "2017-07-14T19:00:16.233Z", "user": 1, "content_type": 7, "object_id": "12", "object_repr": "How to Filter QuerySets Dynamically", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 56, "fields": {"action_time": "2017-07-14T19:00:16.264Z", "user": 1, "content_type": 7, "object_id": "11", "object_repr": "How to Filter QuerySets Dynamically", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 57, "fields": {"action_time": "2017-07-14T19:00:16.295Z", "user": 1, "content_type": 7, "object_id": "10", "object_repr": "How to Filter QuerySets Dynamically", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 58, "fields": {"action_time": "2017-07-14T19:00:16.325Z", "user": 1, "content_type": 7, "object_id": "9", "object_repr": "How to Filter QuerySets Dynamically", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 59, "fields": {"action_time": "2017-07-14T19:00:16.356Z", "user": 1, "content_type": 7, "object_id": "8", "object_repr": "How to Filter QuerySets Dynamically", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 60, "fields": {"action_time": "2017-07-14T19:00:16.386Z", "user": 1, "content_type": 7, "object_id": "7", "object_repr": "How to Filter QuerySets Dynamically", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 61, "fields": {"action_time": "2017-07-14T19:00:16.417Z", "user": 1, "content_type": 7, "object_id": "6", "object_repr": "How to Filter QuerySets Dynamically", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 62, "fields": {"action_time": "2017-07-14T20:59:27.863Z", "user": 1, "content_type": 12, "object_id": "3", "object_repr": "Very Good!", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 63, "fields": {"action_time": "2017-07-14T20:59:50.575Z", "user": 1, "content_type": 12, "object_id": "4", "object_repr": "Excellent!", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 64, "fields": {"action_time": "2017-07-14T21:00:05.850Z", "user": 1, "content_type": 12, "object_id": "5", "object_repr": "nice", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 65, "fields": {"action_time": "2017-07-14T21:40:07.869Z", "user": 1, "content_type": 12, "object_id": "9", "object_repr": "Again Again Again", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 66, "fields": {"action_time": "2017-07-14T21:40:07.905Z", "user": 1, "content_type": 12, "object_id": "8", "object_repr": "Again Again Again Again Again Again Again Again Again", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 67, "fields": {"action_time": "2017-07-14T21:40:07.939Z", "user": 1, "content_type": 12, "object_id": "7", "object_repr": "very Good!", "action_flag": 3, "change_message": ""}}, {"model": "admin.logentry", "pk": 68, "fields": {"action_time": "2017-07-14T21:40:07.969Z", "user": 1, "content_type": 12, "object_id": "6", "object_repr": "I like it:))", "action_flag": 3, "change_message": ""}}]